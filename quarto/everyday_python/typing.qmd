---
title: Typing
format:
  live-html:
    mermaid:
      theme: neutral
    pyodide:
      cell-options:
        autorun: false
        completion: true
---

## Resources

- [Typing](https://docs.python.org/3/library/typing.html) documentation in the official Python documentation.
- [Type checking guide](https://realpython.com/python-type-checking/) in Real Python.

## Typing

In Python, like in any other language, objects have types, like int, float, str or list.
However, variables can hold objects of any type and they can change the type of object that they hold without any restriction.

```{pyodide}
a = 1
print(a)
a = 'Hi!'
print(a)
```

In other languages, like C, Java or Rust the previous code would not even compile because a variable, once it has a type, it can't change its type (or at least this is the general rule).
Languages like Python in which variables and function arguments can change the type of objects they hold are called [dynamic](https://en.wikipedia.org/wiki/Dynamic_programming_language) languages, and languages like C or Rust are called [static](https://en.wikipedia.org/wiki/Static_program_analysis).

Also, in Python function arguments can receive any type.

```{pyodide}
def multiply(a, b):
    return a * b

print(multiply(1, 3))
```

This can cause problems because you could cause an error by calling the function with incorrect types.

```{pyodide}
def multiply(a, b):
    return a * b

print(multiply('a', 'b'))
```

To avoid this kind of problems Python has added types, so now you can inform the user of the function about the expected types.

```{pyodide}
def multiply(a:float, b:float):
    return a * b
```

Now, thanks to the typing information the caller of the function knows which types are expected.
Typing is optional, so you don't need to annotate variables and function arguments with typing information and most Python code is not typed.
In fact typing in Python has been introduced more as documentation than anything else, Python is still a dynamic language.
Moreover, Python does not enforce this typing at runtime, so the caller would still be able to call the functions with incorrect types.

```{pyodide}
def sum_numbers(a:float, b:float):
    return a + b

print(sum_numbers('a', 'b'))
```

If you want to enforce the use of types in your code you could take a look at [mypy](https://mypy-lang.org/), [ty](https://docs.astral.sh/ty/) or [pyrefly](https://github.com/facebook/pyrefly).