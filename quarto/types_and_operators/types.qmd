---
title: Types
format:
  live-html:
    mermaid:
      theme: neutral
    pyodide:
      cell-options:
        autorun: false
        completion: true
---

## Resources

- Real Python tutorial: [basic data types](https://realpython.com/python-data-types/)
- Official documentation: [types and operations](https://docs.python.org/3/library/stdtypes.html).
- Basic introduction to [type and variables](https://github.com/JoseBlanca/py_industriales/blob/main/python/tipos_y_variables.ipynb), [str](https://github.com/JoseBlanca/py_industriales/blob/main/python/cadenas_de_texto.ipynb) and  [booleans](https://github.com/JoseBlanca/py_industriales/blob/main/python/booleanos.ipynb). (In Spanish).
- [type](https://docs.python.org/3/library/functions.html#type) function official documentation.
- Real Python introduction to [numbers](https://realpython.com/python-numbers/) and [bool](https://realpython.com/python-boolean/).
- A discussion about the [floating point arithmethic](https://docs.python.org/3/tutorial/floatingpoint.html) in Python.

## Types

In a computer language variables have [types](https://en.wikipedia.org/wiki/Data_type). For instance, we have already used numbers and text strings.

```{pyodide}
#| setup: true
#| exercise: type01

# this is to avoid a bug in quarto-live, that,
# for some reason does not print the result of type
def type(obj):
    return obj.__class__.__name__
```


```{pyodide}
my_number = 42
text = "My favorite number is"
print(text, my_number)
```

We can ask for the type of variable (or object).

```{pyodide}
#| exercise: type01

number = 42
print('Type of the variable "number" is:', type(number))
print('Type of the string "42":', type("42"))
```

The type for the number 42 is int and for the text string "My favorite number is" is str.
In most computer languages text is called string, or something similar, because, for the computer, a text is a [string of characters](https://en.wikipedia.org/wiki/String_(computer_science)).

## Number types: int and float

In the previous example the type for the number was int ([integer](https://en.wikipedia.org/wiki/Integer_(computer_science))), but, in Python, and most other languages, we have another very important numeric type: float ([floating point number](https://en.wikipedia.org/wiki/Floating-point_arithmetic)).


```{pyodide}
#| excercise: type02

integer = 42  # type is int
floating_point = 42.0  # type is float
```

The main practical difference between the integer and float types is that the arithmetic for integers will be exact, but for floats will be only approximate.
This is not a Python quirk, but a general feature of the computers.

```{pyodide}
number = 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1
print(f'{number:.50f}')
```

Another practical limitation, besides the inherent error due to the approximation, of the floating point arithmetic is that you have to be careful when you compare floats.

```{pyodide}
first_one = 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1
second_one = 1.0
print("Are first and second one the same number?", first_one == second_one)

# But they are quite close
import math
print("Are first and second one close?", math.isclose(first_one, second_one))

# with integers we don't have this problem
first_ten = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
second_ten = 10
print("Are first and second ten the same number?", first_ten == second_ten)
```

## Other types: bool and None

bool ([boolean](https://en.wikipedia.org/wiki/Boolean_data_type)) is a special type that can only have two values: True or False.

```{pyodide}
i_am_learning = True
print(type(i_am_learning), i_am_learning)
i_am_not_here = False
print(type(i_am_not_here), i_am_not_here)
```

Another special type that you will find quite often in Python code is None.
This type can only have one value: None.
It is usally employed when you want to have a variable that still has no value, it signifies that it is empty.

```{pyodide}
#| setup: true
#| exercise: type03

# this is to avoid a bug in quarto-live, that,
# for some reason does not print the result of type
def type(obj):
    return obj.__class__.__name__
```

```{pyodide}
#| excercise: type03
result_to_be_calculated = None
print(type(result_to_be_calculated), result_to_be_calculated)
# Now we can calculate the result
result_to_be_calculated = 42
print(result_to_be_calculated)
```

## Python is dynamic

In Python we don't need to specify the type of a variable before using it, and we can even change the type of object that the variable refers to.
That is not the case in other languages, like C or Rust.
In those static languages the compiler needs to know the type of the variable beforehand, and the type of a variable can not be changed.

```{pyodide}
#| setup: true
#| exercise: type04

# this is to avoid a bug in quarto-live, that,
# for some reason does not print the result of type
def type(obj):
    return obj.__class__.__name__
```

```{pyodide}
#| exercise: type04
my_number = None
print(type(my_number), my_number)
my_number = 42
print(type(my_number), my_number)
my_number = "42"
print(type(my_number), my_number)
my_number = 42.0
print(type(my_number), my_number)
```

Modern Python has the option of specifying the types. This is not a requirement, but you will see some [type hints](https://docs.python.org/3/library/typing.html) in Python code.

```{pyodide}
my_number: int = 42
my_number: float = 42.0
my_number: str = "42"
```

Be careful because Python does not enforce those type hints.
If you wanted to use them for anything else than documentation you would need a type checker like [mypy](https://mypy-lang.org/).
But if you are starting in programming, just forget about this, the idea to remember is that the objects refered to by the variables have types.

## Type casting

[Type casting](https://en.wikipedia.org/wiki/Type_conversion) or type conversion is the action of changing one type into another.
Python has functions to do this type casting.

```{pyodide}
my_number = 42
print(type(my_number), my_number)
my_number = str(my_number)
print(type(my_number), my_number)
my_number = float(my_number)
print(type(my_number), my_number)
my_number = int(my_number)
print(type(my_number), my_number)
```

We can also type cast to boolean.

```{pyodide}
print(bool(42))
print(bool(0))
print(bool("42"))
```

Find out which int and str values will be True and False when converted to boolean.

```{pyodide}
#| exercise: bool_type_casting
print(bool(value_to_test))
```

::: { .hint exercise="bool_type_casting"}
::: { .callout-note collapse="false"}
Try with different int and str values, like 0, 1, 2, 3, "Hello", " ", "".
:::
:::
::: { .solution exercise="bool_type_casting" }
::: { .callout-tip collapse="false"}
```{pyodide}
# Any int, but 0, will be True
print("0", bool(0))
print("1", bool(0))
print("2", bool(2))
print("3", bool(3))
# Any str, but the empty str, will be True
print('""', bool(""))
print('"Hello"', bool("Hello"))
print('" "', bool(" "))
```
:::
:::

Try to convert a boolean to integer.

```{pyodide}
#| exercise: bool_to_int

# what would be the result of converting the boolean values to integers?
```

::: { .solution exercise="bool_to_int" }
::: { .callout-tip collapse="false"}
```{pyodide}
print("True", int(True))
print("False", int(False))
```
:::
:::


## Why do we need types?

For a programming language using types is unavoidable. Different languages have different types, but they all have types.
Why?
Because, internally, the only thing that a computer can really stores in memory is a binary number, and the same binary number can be interpreted as different objects depending on its type.

```{pyodide}
print("The same binary number can represented an integer or a string, depending on its type")
binary_number = 0b110100
print("The binary number is an integer that is usually printed in the decial number system:", binary_number)
as_a_string = chr(binary_number)
print("The binary number as a string:", as_a_string)

print("The number 4 as an integer and as a string be stored by the computer in different ways")
an_object = 4
print(f"The binary representation for {an_object} is: {an_object:b}")
another_object = "4"
print(f"The binary representation for {another_object} is: {ord(another_object):b}")
```

```{mermaid}
flowchart LR
    subgraph memory
        0b110100
    end
    int["as int: 52"]
    0b110100 --> int
    float["as float: 7.3e-44"]
    0b110100 --> float
    str["as str: '4'"]
    0b110100 --> str
```
