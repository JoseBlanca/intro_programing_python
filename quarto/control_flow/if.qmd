---
title: if
format:
  live-html:
    pyodide:
      cell-options:
        autorun: false
        completion: true
---

## Resources

- [Conditional statements](https://realpython.com/python-conditional-statements/) in Real Python.
- [if](https://docs.python.org/3/tutorial/controlflow.html#if-statements) statement in the official documentation.
- [Control flow](https://en.wikipedia.org/wiki/Control_flow) in wikipedia.

## if

[if](https://docs.python.org/3/tutorial/controlflow.html#if-statements) is one of the basic control flow statements.
It allows us to execute some code only if a given condition is met.

```{pyodide}
a = 42

if a == 42:
    print("Yes, it is the answer")

```

If the condition is not met the code inside the if block won't be executed.

```{pyodide}
a = 42

if a > 100:
    print("We have more than 100")

print("Did we have enough?")

```


Every line included in the [block](block.qmd) will be executed, not just the first one.

```{pyodide}
name = "Trinity"

if name == "Trinity":
    print("Yes, she is Trinity")
    print("and she is great")
print("Done")
```

Fix the following code to print "Done!" even when the condition is not met.

```{pyodide}
#| exercise: fix_if_block
money = 10
if money < 1000000:
    print("You are not rich")
    print("Done!")
```
::: { .hint exercise="fix_if_block"}
::: { .callout-note collapse="false"}
Remember that a block ends when the indentation returns to the previous level.
:::
:::
::: { .solution exercise="fix_if_block"}
::: { .callout-note collapse="false"}
```{pyodide}
money = 10
if money < 1000000:
    print("You are not rich")
print("Done!")
```
:::
:::

Fix the following code.

```{pyodide}
#| exercise: fix_equal
group = "Monty Python"
if group = "Monty Python":
    print("Python was named in their honor")
```
::: { .solution exercise="fix_equal"}
::: { .callout-note collapse="false"}
```{pyodide}
group = "Monty Python"
if group == "Monty Python":
    print("Python was named in their honor")
```
:::
:::

## else

It is common that we want to execute some code when the condition is met, and some other code when the condition is not met, for that we use else.

```{pyodide}
name = "John"

if name == "Jane":
    print("Yes, she is Jane")
else:
    print("No, it wasn't Jane")
```


```{pyodide}
a = -1

if a > 0:
    print("The number is positive")
else:
    print("The number is not positive")
```

Fix this code:

```{pyodide}
#| exercise: fix_multiple
number = 453

if number % 2:
print("The number is multiple of 2")
else:
print("The number is not multiple of 2")
```
::: { .solution exercise="fix_multiple" }
::: { .callout-tip collapse="false"}
```{pyodide}
number = 453

if number % 2:
    print("The number is not multiple of 2")
else:
    print("The number is multiple of 2")
```
:::
:::

Write some code capable of, given a pair of numbers, finding out which is the highest.

```{pyodide}
#| exercise: highest
a, b = 3, -4
...
```
::: { .solution exercise="highest" }
::: { .callout-tip collapse="false"}
```{pyodide}
a, b = 3, -4

if a >= b:
    highest = a
else:
    highest = b
print("The highest number was: ", highest)
```
:::
:::

Fix the following code to prevent the error when a = 0.

```{pyodide}
#| exercise: prevent_div_zero
a = 0
b = 3
x = b / a
print(x)

```
::: { .solution exercise="prevent_div_zero" }
::: { .callout-tip collapse="false"}
```{pyodide}
a = 0
b = 3
if a:
    x = b / a
else:
    x = None
print(x)
```
:::
:::

## elif

elif allows us to test for different conditions sequentialy.

```{pyodide}
a = -1

if a > 0:
    print("The number is positive")
elif a == 0:
    print("The number is zero")
else:
    print("The number is negative")
```

When several conditions are met only the first True one will be executed.

```{pyodide}
a = 42

if a == 42:
    print("We have the answer")
elif a >= 0:
    # this won't be executed when the number is 42
    print("The number is zero or positive")
elif a > 0:
    # This will never be executed because if this condition is met
    # the previous condition will be met too
    print("The number is positive")
else:
    print("The number is negative")
```

In Python, a more powerful alternative to elif is the [match](https://docs.python.org/dev/tutorial/controlflow.html#match-statements) statement.

Write a program that classifies a person into: baby, child, teenager, young, and old

```{pyodide}
#| exercise: age

person = ('John', 40)

```
::: { .solution exercise="age" }
::: { .callout-tip collapse="false"}
```{pyodide}

person = ('John', 40)
age = person[1]

if age < 3:
    age_group = "baby"
elif age < 10:
    age_group = "child"
elif age < 18:
    age_group = "teen"
elif age < 42:
    age_group = "young"
else:
    age_group = "old"

print(f"{person[0]} is a {age_group}")

```
:::
:::

Write a program that writes the quote of the selected philosopher.

```{pyodide}
#| exercise: philosopher_quote
plato_quote = "Only the dead have seen the end of war."
aristogle_quote = "Hope is a waking dream."
descartes_quote = "I think; therefore I am."

philosopher = "Plato"
```
::: { .solution exercise="philosopher_quote" }
::: { .callout-tip collapse="false"}
```{pyodide}
plato_quote = "Only the dead have seen the end of war."
aristotle_quote = "Hope is a waking dream."
descartes_quote = "I think; therefore I am."

philosopher = "Plato"

if philosopher.lower() == "plato":
    print(plato_quote)
elif philosopher.lower() == "aristotle":
    print(aristotle_quote)
elif philosopher.lower() == "descartes":
    print(descartes_quote)
else:
    print("Unknown philosopher")
```
:::
:::

## Boolean casting

When a condition is evaluated, internally the if statement casts anything given to a boolean. So, you will usually see expressions like:

```{pyodide}

number = 0
if n:
    print("The number is not zero")

name = ""

if not name:
    print("The name is not defined")

```

It would be very weird to write:

```{pyodide}

name = ""

if name == "":
    print("The name is not defined")

```

Remember that everything that we talked about booleans and [boolean arithmetic](../types_and_operators/comparisons_and_bool_operators.qmd) is applicable to the if evaluation.
