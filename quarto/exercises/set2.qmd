---
title: Exercises 2
format:
  live-html:
    pyodide:
      cell-options:
        autorun: false
        completion: true
---

## Calculate the frequency of each item in a class

Write a function that given a list of items returns a dictionary with the frequency of each kind of item found in the list.

```{pyodide}
#| exercise: calc_freqs

def calc_freqs(items):
    ...


items = ['M', 'F', 'F', 'F', 'M', 'M', 'F', 'M', 'M', 'F']
print(calc_freqs(items))

items = [1, 2, 2, 3, 1, 2, 3, 2, 1, 2, 3, 4, 5, 2, 1, 2]
print(calc_freqs(items))
```
::: { .solution exercise="calc_freqs"}
::: { .callout-tip collapse="false"}
```{pyodide}
def calc_freqs(items):
    counts = {}
    for item in items:
        if item in counts:
            counts[item] += 1
        else:
            counts[item] = 1

    total_items = sum(counts.values())
    freqs = {}
    for item, num_counted in counts.items():
        freqs[item] = num_counted / total_items
    return freqs

items = ['M', 'F', 'F', 'F', 'M', 'M', 'F', 'M', 'M', 'F']
print(calc_freqs(items))

items = [1, 2, 2, 3, 1, 2, 3, 2, 1, 2, 3, 4, 5, 2, 1, 2]
print(calc_freqs(items))
```

Alternatively, you could do it using the Counter class and a dict comprenhension.

```{pyodide}
from collections import Counter

def calc_freqs(items):
    counts = Counter(items)

    total_items = counts.total()
    freqs = {item: num_counted / total_items for item, num_counted in counts.items()}
    return freqs

items = ['M', 'F', 'F', 'F', 'M', 'M', 'F', 'M', 'M', 'F']
print(calc_freqs(items))

items = [1, 2, 2, 3, 1, 2, 3, 2, 1, 2, 3, 4, 5, 2, 1, 2]
print(calc_freqs(items))
```
:::
:::

## Solve quadratic equations

A quadratic equation would be: a * x**2 + b * x + c = 0
You can solve it with the [quadratic formula](https://en.wikipedia.org/wiki/Quadratic_formula).

Write a function that solves the equation and returns its two roots and another function that checks the result.
You can even try to solve equations with complex solutions using the [cmath](https://docs.python.org/3/library/cmath.html) module.

```{pyodide}
#| exercise: quadratic_eq

def solve_quadratic_equation(a, b, c):
   ...

def check_result(a, b, c, x):
   ...


a, b, c = 2, 3, 4
x1, x2 = solve_quadratic_equation(a, b, c)
check_result(a, b, c, x1)
check_result(a, b, c, x2)
print(x1)
print(x2)
```
::: { .solution exercise="quadratic_eq"}
::: { .callout-tip collapse="false"}

```{pyodide}
from math import sqrt, isclose

def solve_quadratic_equation(a, b, c):
    if isclose(a, 0):
        return None, None
        # It would be better to do raise ValueError

    root = b**2 - (4 * a * c)
    if root < 0:
        # complex solution
        return None, None
        # It would be better to do raise ValueError
        # or to calculate the complex solution

    root = sqrt(root)
    x1 = (-b + root) / (2 * a)
    x2 = (-b - root) / (2 * a)
    return x1, x2

def check_result(a, b, c, x):
    if x is None:
        return
    result = a * x**2 + b * x + c
    if not isclose(result, 0, abs_tol=1e-5):
       print('Not zero but:', result)

a, b, c = 2, 3, 4
x1, x2 = solve_quadratic_equation(a, b, c)
check_result(a, b, c, x1)
check_result(a, b, c, x2)
print(x1)
print(x2)
```

Alternatively you could even solve equations with complex solutions.
```{pyodide}
from cmath import sqrt, isclose
# a * x**2 + b * x + c = 0

def solve_quadratic_equation(a, b, c):
    if isclose(a, 0):
        return None
        # It would be better to do raise ValueError

    root = sqrt(b**2 - (4 * a * c))
    x1 = (-b + root) / (2 * a)
    x2 = (-b - root) / (2 * a)
    return x1, x2

def check_result(a, b, c, x):
    result = a * x**2 + b * x + c
    if not isclose(result, 0, abs_tol=1e-5):
       print('Not zero but:', result)

a, b, c = 2, 3, 4
x1, x2 = solve_quadratic_equation(a, b, c)
check_result(a, b, c, x1)
check_result(a, b, c, x2)
print(x1)
print(x2)
```
:::
:::


## Read the genetic code into a dictionary

The dictionary should have the codon as the key and the aminoacid name as the value.

```{pyodide}
#| exercise: genetic_code_dict
AA_TABLE = '''Codon aa_full_name aa_abreviation
TTT Phenylalanine F
TTC Phenylalanine F
TTA Leucine L
TTG Leucine L
TCT Serine S
TCC Serine S
TCA Serine S
TCG Serine S
TAT Tyrosine Y
TAC Tyrosine Y
TAA Stop X
TAG Stop  X
TGT Cysteine C
TGC Cysteine C
TGA Stop X
TGG Tryptophan W
CTT Leucine L
CTC Leucine L
CTA Leucine L
CTG Leucine L
CCT Proline P
CCC Proline P
CCA Proline P
CCG Proline P
CAT Histidine H
CAC Histidine H
CAA Glutamine Q
CAG Glutamine Q
CGT Arginine R
CGC Arginine R
CGA Arginine R
CGG Arginine R
ATT Isoleucine I
ATC Isoleucine I
ATA Isoleucine I
ATG Methionine M
ACT Threonine T
ACC Threonine T
ACA Threonine T
ACG Threonine T
AAT Asparagine N
AAC Asparagine N
AAA Lysine K
AAG Lysine K
AGT Serine S
AGC Serine S
AGA Arginine R
AGG Arginine R
GTT Valine V
GTC Valine V
GTA Valine V
GTG Valine V
GCT Alanine A
GCC Alanine A
GCA Alanine A
GCG Alanine A
GAT Aspartate D
GAC Aspartate D
GAA Glutamate E
GAG Glutamate E
GGT Glycine G
GGC Glycine G
GGA Glycine G
GGG Glycine G
'''
```
::: { .hint exercise="genetic_code_dict"}
::: { .callout-note collapse="false"}

splitlines

:::
:::
::: { .solution exercise="genetic_code_dict"}
::: { .callout-tip collapse="false"}
```{pyodide}
AA_TABLE = '''Codon aa_full_name aa_abreviation
TTT Phenylalanine F
TTC Phenylalanine F
TTA Leucine L
TTG Leucine L
TCT Serine S
TCC Serine S
TCA Serine S
TCG Serine S
TAT Tyrosine Y
TAC Tyrosine Y
TAA Stop X
TAG Stop  X
TGT Cysteine C
TGC Cysteine C
TGA Stop X
TGG Tryptophan W
CTT Leucine L
CTC Leucine L
CTA Leucine L
CTG Leucine L
CCT Proline P
CCC Proline P
CCA Proline P
CCG Proline P
CAT Histidine H
CAC Histidine H
CAA Glutamine Q
CAG Glutamine Q
CGT Arginine R
CGC Arginine R
CGA Arginine R
CGG Arginine R
ATT Isoleucine I
ATC Isoleucine I
ATA Isoleucine I
ATG Methionine M
ACT Threonine T
ACC Threonine T
ACA Threonine T
ACG Threonine T
AAT Asparagine N
AAC Asparagine N
AAA Lysine K
AAG Lysine K
AGT Serine S
AGC Serine S
AGA Arginine R
AGG Arginine R
GTT Valine V
GTC Valine V
GTA Valine V
GTG Valine V
GCT Alanine A
GCC Alanine A
GCA Alanine A
GCG Alanine A
GAT Aspartate D
GAC Aspartate D
GAA Glutamate E
GAG Glutamate E
GGT Glycine G
GGC Glycine G
GGA Glycine G
GGG Glycine G
'''

genetic_code = {}
first_line = True
for line in AA_TABLE.splitlines():
    if first_line:
        first_line = False
        continue
    line = line.strip()
    if not line:
        continue
    codon, long_name, short_name = line.split()
    genetic_code [codon] = short_name
print(genetic_code)
```
:::
:::

## Write a program that translates a coding sequence into a protein

```{pyodide}
#| exercise: translate_protein

dna_coding_seq = 'atgtggacttga'
prot_seq = translate(dna_coding_seq)
```

::: { .hint exercise="translate_protein"}
::: { .callout-note collapse="false"}

You can get the position of every codon using the [range](https://docs.python.org/3/library/functions.html#func-range) function.
Remember that range has a step argument that can be set to 3.

:::
:::
::: { .solution exercise="translate_protein" }
::: { .callout-tip collapse="false"}
```{pyodide}
AA_TABLE = '''Codon aa_full_name aa_abreviation
TTT Phenylalanine F
TTC Phenylalanine F
TTA Leucine L
TTG Leucine L
TCT Serine S
TCC Serine S
TCA Serine S
TCG Serine S
TAT Tyrosine Y
TAC Tyrosine Y
TAA Stop X
TAG Stop  X
TGT Cysteine C
TGC Cysteine C
TGA Stop X
TGG Tryptophan W
CTT Leucine L
CTC Leucine L
CTA Leucine L
CTG Leucine L
CCT Proline P
CCC Proline P
CCA Proline P
CCG Proline P
CAT Histidine H
CAC Histidine H
CAA Glutamine Q
CAG Glutamine Q
CGT Arginine R
CGC Arginine R
CGA Arginine R
CGG Arginine R
ATT Isoleucine I
ATC Isoleucine I
ATA Isoleucine I
ATG Methionine M
ACT Threonine T
ACC Threonine T
ACA Threonine T
ACG Threonine T
AAT Asparagine N
AAC Asparagine N
AAA Lysine K
AAG Lysine K
AGT Serine S
AGC Serine S
AGA Arginine R
AGG Arginine R
GTT Valine V
GTC Valine V
GTA Valine V
GTG Valine V
GCT Alanine A
GCC Alanine A
GCA Alanine A
GCG Alanine A
GAT Aspartate D
GAC Aspartate D
GAA Glutamate E
GAG Glutamate E
GGT Glycine G
GGC Glycine G
GGA Glycine G
GGG Glycine G
'''

def create_genetic_code():
    genetic_code = {}
    first_line = True
    for line in AA_TABLE.splitlines():
        if first_line:
            first_line = False
            continue
        line = line.strip()
        if not line:
            continue
        codon, long_name, short_name = line.split()
        genetic_code [codon] = short_name
    return genetic_code

def translate(dna_seq):
    genetic_code = create_genetic_code()
    aminoacids = []
    for codon_start in range(0, len(dna_seq), 3):
        codon = dna_seq[codon_start: codon_start + 3]
        aminoacid = genetic_code[codon.upper()]
        aminoacids.append(aminoacid)
    return ''.join(aminoacids)
    
dna_coding_seq = 'atgtggacttga'
prot_seq = translate(dna_coding_seq)
print(prot_seq)
```
:::
:::

## Create a restriction map

Restriction enzymes recognize specific sequences, for instance:

- EcoRI: GATTC (cuts in the position between G and A, G^ATTC)
- Hind III : AAGCTT (cuts in the position between A and A, AAGCT^T)


Given a sequence, create the restriction fragments that these two sequences would create:

```{pyodide}
#| exercise: restriction_map
puc18_seq = """GCGCCCAATACGCAAACCGCCTCTCCCCGCGCGTTGGCCGATTCATTAATGCAGCTGGCACGACAGGTTT
CCCGACTGGAAAGCGGGCAGTGAGCGCAACGCAATTAATGTGAGTTAGCTCACTCATTAGGCACCCCAGG
CTTTACACTTTATGCTTCCGGCTCGTATGTTGTGTGGAATTGTGAGCGGATAACAATTTCACACAGGAAA
CAGCTATGACCATGATTACGAATTCGAGCTCGGTACCCGGGGATCCTCTAGAGTCGACCTGCAGGCATGC
AAGCTTGGCACTGGCCGTCGTTTTACAACGTCGTGACTGGGAAAACCCTGGCGTTACCCAACTTAATCGC
CTTGCAGCACATCCCCCTTTCGCCAGCTGGCGTAATAGCGAAGAGGCCCGCACCGATCGCCCTTCCCAAC
AGTTGCGCAGCCTGAATGGCGAATGGCGCCTGATGCGGTATTTTCTCCTTACGCATCTGTGCGGTATTTC
ACACCGCATATGGTGCACTCTCAGTACAATCTGCTCTGATGCCGCATAGTTAAGCCAGCCCCGACACCCG
CCAACACCCGCTGACGCGCCCTGACGGGCTTGTCTGCTCCCGGCATCCGCTTACAGACAAGCTGTGACCG
TCTCCGGGAGCTGCATGTGTCAGAGGTTTTCACCGTCATCACCGAAACGCGCGAGACGAAAGGGCCTCGT
GATACGCCTATTTTTATAGGTTAATGTCATGATAATAATGGTTTCTTAGACGTCAGGTGGCACTTTTCGG
GGAAATGTGCGCGGAACCCCTATTTGTTTATTTTTCTAAATACATTCAAATATGTATCCGCTCATGAGAC
AATAACCCTGATAAATGCTTCAATAATATTGAAAAAGGAAGAGTATGAGTATTCAACATTTCCGTGTCGC
CCTTATTCCCTTTTTTGCGGCATTTTGCCTTCCTGTTTTTGCTCACCCAGAAACGCTGGTGAAAGTAAAA
GATGCTGAAGATCAGTTGGGTGCACGAGTGGGTTACATCGAACTGGATCTCAACAGCGGTAAGATCCTTG
AGAGTTTTCGCCCCGAAGAACGTTTTCCAATGATGAGCACTTTTAAAGTTCTGCTATGTGGCGCGGTATT
ATCCCGTATTGACGCCGGGCAAGAGCAACTCGGTCGCCGCATACACTATTCTCAGAATGACTTGGTTGAG
TACTCACCAGTCACAGAAAAGCATCTTACGGATGGCATGACAGTAAGAGAATTATGCAGTGCTGCCATAA
CCATGAGTGATAACACTGCGGCCAACTTACTTCTGACAACGATCGGAGGACCGAAGGAGCTAACCGCTTT
TTTGCACAACATGGGGGATCATGTAACTCGCCTTGATCGTTGGGAACCGGAGCTGAATGAAGCCATACCA
AACGACGAGCGTGACACCACGATGCCTGTAGCAATGGCAACAACGTTGCGCAAACTATTAACTGGCGAAC
TACTTACTCTAGCTTCCCGGCAACAATTAATAGACTGGATGGAGGCGGATAAAGTTGCAGGACCACTTCT
GCGCTCGGCCCTTCCGGCTGGCTGGTTTATTGCTGATAAATCTGGAGCCGGTGAGCGTGGGTCTCGCGGT
ATCATTGCAGCACTGGGGCCAGATGGTAAGCCCTCCCGTATCGTAGTTATCTACACGACGGGGAGTCAGG
CAACTATGGATGAACGAAATAGACAGATCGCTGAGATAGGTGCCTCACTGATTAAGCATTGGTAACTGTC
AGACCAAGTTTACTCATATATACTTTAGATTGATTTAAAACTTCATTTTTAATTTAAAAGGATCTAGGTG
AAGATCCTTTTTGATAATCTCATGACCAAAATCCCTTAACGTGAGTTTTCGTTCCACTGAGCGTCAGACC
CCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTTTTTTTCTGCGCGTAATCTGCTGCTTGCAAACAAA
AAAACCACCGCTACCAGCGGTGGTTTGTTTGCCGGATCAAGAGCTACCAACTCTTTTTCCGAAGGTAACT
GGCTTCAGCAGAGCGCAGATACCAAATACTGTCCTTCTAGTGTAGCCGTAGTTAGGCCACCACTTCAAGA
ACTCTGTAGCACCGCCTACATACCTCGCTCTGCTAATCCTGTTACCAGTGGCTGCTGCCAGTGGCGATAA
GTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAGGCGCAGCGGTCGGGCTGAACGGGG
GGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAACTGAGATACCTACAGCGTGAGCTAT
GAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTATCCGGTAAGCGGCAGGGTCGGAACAGG
AGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCCTGGTATCTTTATAGTCCTGTCGGGTTTCGCCACCTC
TGACTTGAGCGTCGATTTTTGTGATGCTCGTCAGGGGGGCGGAGCCTATGGAAAAACGCCAGCAACGCGG
CCTTTTTACGGTTCCTGGCCTTTTGCTGGCCTTTTGCTCACATGTTCTTTCCTGCGTTATCCCCTGATTC
TGTGGATAACCGTATTACCGCCTTTGAGTGAGCTGATACCGCTCGCCGCAGCCGAACGACCGAGCGCAGC
GAGTCAGTGAGCGAGGAAGCGGAAGA"""

ecori = {"sequence": "GATTC", "cut-position": 1}
hindiii = {"sequence": "AAGCTT", "cut-position": 1}
enzymes = [ecori, hindiii]

print(cut_dna("GATTCAAGCTT", enzymes))
# expected fragments ['G', 'ATTCA', 'AGCTT']

puc18_seq = "".join(puc18_seq.splitlines())
fragments = cut_dna(puc18_seq, enzymes)
print(fragments)
```
::: { .solution exercise="restriction_map" }
::: { .callout-tip collapse="false"}
```{pyodide}
puc18_seq = """GCGCCCAATACGCAAACCGCCTCTCCCCGCGCGTTGGCCGATTCATTAATGCAGCTGGCACGACAGGTTT
CCCGACTGGAAAGCGGGCAGTGAGCGCAACGCAATTAATGTGAGTTAGCTCACTCATTAGGCACCCCAGG
CTTTACACTTTATGCTTCCGGCTCGTATGTTGTGTGGAATTGTGAGCGGATAACAATTTCACACAGGAAA
CAGCTATGACCATGATTACGAATTCGAGCTCGGTACCCGGGGATCCTCTAGAGTCGACCTGCAGGCATGC
AAGCTTGGCACTGGCCGTCGTTTTACAACGTCGTGACTGGGAAAACCCTGGCGTTACCCAACTTAATCGC
CTTGCAGCACATCCCCCTTTCGCCAGCTGGCGTAATAGCGAAGAGGCCCGCACCGATCGCCCTTCCCAAC
AGTTGCGCAGCCTGAATGGCGAATGGCGCCTGATGCGGTATTTTCTCCTTACGCATCTGTGCGGTATTTC
ACACCGCATATGGTGCACTCTCAGTACAATCTGCTCTGATGCCGCATAGTTAAGCCAGCCCCGACACCCG
CCAACACCCGCTGACGCGCCCTGACGGGCTTGTCTGCTCCCGGCATCCGCTTACAGACAAGCTGTGACCG
TCTCCGGGAGCTGCATGTGTCAGAGGTTTTCACCGTCATCACCGAAACGCGCGAGACGAAAGGGCCTCGT
GATACGCCTATTTTTATAGGTTAATGTCATGATAATAATGGTTTCTTAGACGTCAGGTGGCACTTTTCGG
GGAAATGTGCGCGGAACCCCTATTTGTTTATTTTTCTAAATACATTCAAATATGTATCCGCTCATGAGAC
AATAACCCTGATAAATGCTTCAATAATATTGAAAAAGGAAGAGTATGAGTATTCAACATTTCCGTGTCGC
CCTTATTCCCTTTTTTGCGGCATTTTGCCTTCCTGTTTTTGCTCACCCAGAAACGCTGGTGAAAGTAAAA
GATGCTGAAGATCAGTTGGGTGCACGAGTGGGTTACATCGAACTGGATCTCAACAGCGGTAAGATCCTTG
AGAGTTTTCGCCCCGAAGAACGTTTTCCAATGATGAGCACTTTTAAAGTTCTGCTATGTGGCGCGGTATT
ATCCCGTATTGACGCCGGGCAAGAGCAACTCGGTCGCCGCATACACTATTCTCAGAATGACTTGGTTGAG
TACTCACCAGTCACAGAAAAGCATCTTACGGATGGCATGACAGTAAGAGAATTATGCAGTGCTGCCATAA
CCATGAGTGATAACACTGCGGCCAACTTACTTCTGACAACGATCGGAGGACCGAAGGAGCTAACCGCTTT
TTTGCACAACATGGGGGATCATGTAACTCGCCTTGATCGTTGGGAACCGGAGCTGAATGAAGCCATACCA
AACGACGAGCGTGACACCACGATGCCTGTAGCAATGGCAACAACGTTGCGCAAACTATTAACTGGCGAAC
TACTTACTCTAGCTTCCCGGCAACAATTAATAGACTGGATGGAGGCGGATAAAGTTGCAGGACCACTTCT
GCGCTCGGCCCTTCCGGCTGGCTGGTTTATTGCTGATAAATCTGGAGCCGGTGAGCGTGGGTCTCGCGGT
ATCATTGCAGCACTGGGGCCAGATGGTAAGCCCTCCCGTATCGTAGTTATCTACACGACGGGGAGTCAGG
CAACTATGGATGAACGAAATAGACAGATCGCTGAGATAGGTGCCTCACTGATTAAGCATTGGTAACTGTC
AGACCAAGTTTACTCATATATACTTTAGATTGATTTAAAACTTCATTTTTAATTTAAAAGGATCTAGGTG
AAGATCCTTTTTGATAATCTCATGACCAAAATCCCTTAACGTGAGTTTTCGTTCCACTGAGCGTCAGACC
CCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTTTTTTTCTGCGCGTAATCTGCTGCTTGCAAACAAA
AAAACCACCGCTACCAGCGGTGGTTTGTTTGCCGGATCAAGAGCTACCAACTCTTTTTCCGAAGGTAACT
GGCTTCAGCAGAGCGCAGATACCAAATACTGTCCTTCTAGTGTAGCCGTAGTTAGGCCACCACTTCAAGA
ACTCTGTAGCACCGCCTACATACCTCGCTCTGCTAATCCTGTTACCAGTGGCTGCTGCCAGTGGCGATAA
GTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAGGCGCAGCGGTCGGGCTGAACGGGG
GGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAACTGAGATACCTACAGCGTGAGCTAT
GAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTATCCGGTAAGCGGCAGGGTCGGAACAGG
AGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCCTGGTATCTTTATAGTCCTGTCGGGTTTCGCCACCTC
TGACTTGAGCGTCGATTTTTGTGATGCTCGTCAGGGGGGCGGAGCCTATGGAAAAACGCCAGCAACGCGG
CCTTTTTACGGTTCCTGGCCTTTTGCTGGCCTTTTGCTCACATGTTCTTTCCTGCGTTATCCCCTGATTC
TGTGGATAACCGTATTACCGCCTTTGAGTGAGCTGATACCGCTCGCCGCAGCCGAACGACCGAGCGCAGC
GAGTCAGTGAGCGAGGAAGCGGAAGA"""


def cut_dna(dna_seq, enzymes):
    cut_positions = set()
    for enzyme in enzymes:
        enzyme_pos = dna_seq.find(enzyme["sequence"])
        if enzyme_pos < 0:
            continue
        cut_pos = enzyme_pos + enzyme["cut-position"]
        cut_positions.add(cut_pos)
    cut_positions = sorted(cut_positions)

    fragments = []
    for cut_position in reversed(cut_positions):
        fragment = dna_seq[cut_position:]
        dna_seq = dna_seq[:cut_position]
        fragments.append(fragment)
    if dna_seq:
        fragments.append(dna_seq)
    return list(reversed(fragments))

ecori = {"sequence": "GATTC", "cut-position": 1}
hindiii = {"sequence": "AAGCTT", "cut-position": 1}
enzymes = [ecori, hindiii]

print(cut_dna("GATTCAAGCTT", enzymes))
# expected fragments ['G', 'ATTCA', 'AGCTT']
puc18_seq = "".join(puc18_seq.splitlines())
fragments = cut_dna(puc18_seq, enzymes)
```
:::
:::
